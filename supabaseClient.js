// supabaseClient.js - Version corrig√©e avec attente du chargement
// Ce module initialise et exporte le client Supabase

// Fonction pour attendre que la biblioth√®que soit charg√©e
function waitForSupabaseLibrary() {
    return new Promise((resolve, reject) => {
        // Si d√©j√† charg√©e, r√©soudre imm√©diatement
        if (typeof window.supabase !== 'undefined') {
            console.log('‚úÖ Biblioth√®que Supabase d√©j√† charg√©e');
            resolve();
            return;
        }
        
        console.log('‚è≥ Attente du chargement de la biblioth√®que Supabase...');
        
        let attempts = 0;
        const maxAttempts = 50; // 5 secondes maximum
        
        const checkInterval = setInterval(() => {
            attempts++;
            
            if (typeof window.supabase !== 'undefined') {
                clearInterval(checkInterval);
                console.log('‚úÖ Biblioth√®que Supabase charg√©e avec succ√®s');
                resolve();
            } else if (attempts >= maxAttempts) {
                clearInterval(checkInterval);
                console.error('‚ùå Timeout: Biblioth√®que Supabase non charg√©e apr√®s 5 secondes');
                reject(new Error('Timeout: Biblioth√®que Supabase non charg√©e. V√©rifiez que le script CDN est accessible.'));
            }
        }, 100); // V√©rifier toutes les 100ms
    });
}

// Fonction pour attendre que la configuration soit disponible
function waitForConfig() {
    return new Promise((resolve, reject) => {
        // Si d√©j√† disponible, r√©soudre imm√©diatement
        if (window.PRIVATE_CONFIG?.supabaseUrl && window.PRIVATE_CONFIG?.supabaseAnonKey) {
            console.log('‚úÖ Configuration Supabase d√©j√† disponible');
            resolve();
            return;
        }
        
        console.log('‚è≥ Attente de la configuration Supabase...');
        
        let attempts = 0;
        const maxAttempts = 30; // 3 secondes maximum
        
        const checkInterval = setInterval(() => {
            attempts++;
            
            if (window.PRIVATE_CONFIG?.supabaseUrl && window.PRIVATE_CONFIG?.supabaseAnonKey) {
                clearInterval(checkInterval);
                console.log('‚úÖ Configuration Supabase charg√©e avec succ√®s');
                resolve();
            } else if (attempts >= maxAttempts) {
                clearInterval(checkInterval);
                console.error('‚ùå Timeout: Configuration Supabase manquante apr√®s 3 secondes');
                reject(new Error('Configuration Supabase manquante. V√©rifiez que private-config.js est bien inject√©.'));
            }
        }, 100); // V√©rifier toutes les 100ms
    });
}

// Fonction principale pour obtenir le client Supabase
export async function getSupabaseClient() {
    try {
        console.log('üîß Initialisation du client Supabase via module...');
        
        // 1. Attendre que la configuration soit disponible
        await waitForConfig();
        
        // 2. Attendre que la biblioth√®que Supabase soit charg√©e
        await waitForSupabaseLibrary();
        
        // 3. V√©rifier que la configuration est valide
        if (!window.PRIVATE_CONFIG || !window.PRIVATE_CONFIG.supabaseUrl || !window.PRIVATE_CONFIG.supabaseAnonKey) {
            throw new Error('Configuration Supabase invalide ou manquante.');
        }
        
        // 4. V√©rifier que la biblioth√®que est accessible
        if (!window.supabase || typeof window.supabase.createClient !== 'function') {
            throw new Error('Biblioth√®que Supabase non accessible ou createClient manquant.');
        }
        
        console.log('üîó Cr√©ation du client Supabase...');
        console.log('üì° URL:', window.PRIVATE_CONFIG.supabaseUrl);
        
        // 5. Cr√©er et retourner le client
        const { createClient } = window.supabase;
        const client = createClient(
            window.PRIVATE_CONFIG.supabaseUrl, 
            window.PRIVATE_CONFIG.supabaseAnonKey
        );
        
        console.log('‚úÖ Client Supabase cr√©√© avec succ√®s via module');
        return client;
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la cr√©ation du client Supabase:', error);
        throw error;
    }
}

// Fonction utilitaire pour v√©rifier l'√©tat
export function checkSupabaseStatus() {
    return {
        libraryLoaded: typeof window.supabase !== 'undefined',
        configAvailable: !!(window.PRIVATE_CONFIG?.supabaseUrl && window.PRIVATE_CONFIG?.supabaseAnonKey),
        createClientAvailable: typeof window.supabase?.createClient === 'function'
    };
}

// Logs de d√©bogage
console.log('üì¶ Module supabaseClient.js charg√©');
console.log('üîç √âtat initial:', checkSupabaseStatus());