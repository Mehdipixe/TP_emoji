name: 🚀 Déploiement Sécurisé avec Secrets

# Déclenchement : à chaque push sur main ou manuellement
on:
  push:
    branches: [main]
  workflow_dispatch:  # Permet de lancer manuellement

# Permissions pour GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Évite les déploiements concurrents
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    name: 📦 Build et Déploiement
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: 🔧 Configuration des Pages
        uses: actions/configure-pages@v4

      - name: 🔒 Injection des secrets (Configuration Supabase)
        run: |
          echo "🔑 Création du fichier de configuration sécurisé..."

          # Générer dynamiquement le contenu de PRIVATE_CONFIG avec tous les secrets
          echo "// Configuration générée automatiquement par GitHub Actions" > private-config.js
          echo "// 🔒 Ce fichier contient vos clés API et ne sera jamais visible dans le repository" >> private-config.js
          echo "window.PRIVATE_CONFIG = {" >> private-config.js
          echo "  mode: 'supabase'," >> private-config.js
          echo "  useRealtime: true," >> private-config.js

          # Injecter tous les secrets du dépôt (hors variables GitHub par défaut)
          for secret in $(env | grep '^ACTIONS_SECRET_' | cut -d'=' -f1); do
            key=$(echo $secret | sed 's/^ACTIONS_SECRET_//g' | tr '[:upper:]' '[:lower:]')
            value=$(printenv $secret)
            echo "  $key: '$value'," >> private-config.js
          done

          # Ajouter les métadonnées de déploiement
          echo "  deployedAt: '${{ github.event.head_commit.timestamp }}'," >> private-config.js
          echo "  deployedBy: 'GitHub Actions'," >> private-config.js
          echo "  commitSha: '${{ github.sha }}'," >> private-config.js
          echo "  version: '1.0.0-secure'" >> private-config.js
          echo "};" >> private-config.js
          echo "console.log('🎭 Emoji Code Mood - Configuration automatique chargée');" >> private-config.js
          echo "console.log('⚡ Mode Collaboratif Supabase activé');" >> private-config.js

          echo "✅ Configuration créée avec succès"

      - name: 📝 Modification de l'HTML pour charger la configuration
        run: |
          echo "🔧 Injection de la référence au fichier de configuration..."

          # Ajouter la référence au fichier de config dans l'HTML principal
          sed -i 's|<!-- PRIVATE_CONFIG_PLACEHOLDER -->|<script src="private-config.js"></script>|g' index.html
          
          # Ajouter la référence au fichier de config dans la page de test si elle existe
          if [ -f test.html ]; then
            sed -i 's|<!-- PRIVATE_CONFIG_PLACEHOLDER -->|<script src="private-config.js"></script>|g' test.html
            echo "✅ test.html modifié pour utiliser la configuration sécurisée"
          fi

          echo "✅ HTML modifié pour utiliser la configuration sécurisée"

      - name: 🧹 Nettoyage des fichiers sensibles
        run: |
          # Supprimer les templates et fichiers de développement
          rm -f private-config.template.js 2>/dev/null || true
          rm -f index-supabase-secure.html 2>/dev/null || true

          echo "🗑️ Fichiers de développement nettoyés"

      - name: 📋 Vérification de sécurité
        run: |
          echo "🔍 Vérification finale de sécurité..."

          # Vérifier qu'aucun placeholder n'est resté
          if grep -r "VOTRE_PROJECT_REF\|VOTRE_ANON_KEY\|your-project\|your-anon-key" . --exclude-dir=.git --exclude-dir=docs --exclude-dir=.github; then
            echo "❌ ERREUR: Des placeholders ont été détectés !"
            exit 1
          fi

          # Vérifier que la configuration est bien injectée
          if ! grep -q "window.PRIVATE_CONFIG" private-config.js; then
            echo "❌ ERREUR: Configuration non injectée !"
            exit 1
          fi
          
          # Vérifier que les secrets sont bien remplacés
          if grep -q "secrets\.SUPABASE_URL\|secrets\.SUPABASE_ANON_KEY" private-config.js; then
            echo "❌ ERREUR: Les secrets n'ont pas été remplacés !"
            exit 1
          fi
          
          echo "✅ Vérification de sécurité réussie"

      - name: 📊 Informations de build
        run: |
          echo "📦 Informations du déploiement:"
          echo "  📅 Date: $(date)"
          echo "  🔗 Commit: ${{ github.sha }}"
          echo "  👤 Auteur: ${{ github.actor }}"
          echo "  🌐 URL cible: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          echo "  ⚡ Mode: Collaboratif Supabase"

      - name: 📤 Téléversement des artefacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: 🚀 Déploiement vers GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 🎉 Succès du déploiement
        run: |
          echo "✅ Déploiement réussi !"
          echo "🌐 Votre application est disponible à: ${{ steps.deployment.outputs.page_url }}"
          echo "⚡ Mode Collaboratif Supabase activé automatiquement"
          echo "🔒 Vos clés API restent secrètes et sécurisées"
